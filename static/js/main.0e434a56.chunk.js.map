{"version":3,"sources":["components/AddOption.js","components/Option.js","components/Options.js","components/Header.js","components/Action.js","components/OptionModal.js","components/IndecisionApp.js","CounterApp.js","serviceWorker.js","index.js"],"names":["AddOption","props","handleAddOption","bind","state","error0","undefined","e","preventDefault","option","target","elements","value","trim","error","this","setState","className","onSubmit","type","name","React","Component","Option","count","onClick","handleDeleteOption","Options","handleDeleteOptions","options","length","map","index","key","Header","title","subtitle","defaultProps","handlePick","disabled","hasOptions","OptionModal","isOpen","selectedOption","contentLabel","onRequestClose","close","closeTimeoutMS","IndecisionApp","optionToRemove","prevState","filter","randomNum","Math","floor","random","indexOf","concat","handleCloseModal","json","localStorage","getItem","JSON","parse","prevProps","stringify","setItem","Action","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e434a56.chunk.js","sourcesContent":["import React from 'react';\n\nclass AddOption extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.handleAddOption=this.handleAddOption.bind(this);\n\t\tthis.state = {\n\t\t\terror0 : undefined,\n\t\t}\n\t}\n\thandleAddOption(e){\n\t\te.preventDefault();\n\t\tconst option = e.target.elements.option.value.trim();\n\t\tconst error = this.props.handleAddOption(option);\n\t\t\n\t\tthis.setState(() => ({ error }));\n\t\tif(!error){\n\t\t\te.target.elements.option.value = '';\n\t\t}\n\t}\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t{\n\t\t\t\t\tthis.state.error && <p className=\"add-option-error\">{this.state.error}</p>\n\t\t\t\t}\n\t\t\t\t<form onSubmit={this.handleAddOption} className=\"add-option\">\n\t\t\t\t\t<input type=\"text\" name=\"option\" className=\"add-option__input\"/>\n\t\t\t\t\t<button className=\"button\">Add Option</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AddOption;","import React from 'react';\n\nconst Option = (props) => (\n    <div className=\"option\">\n        <p className=\"option__text\">{props.count}. {props.option}</p>\n        <button \n            onClick={() => props.handleDeleteOption(props.option)}\t\n            className=\"button button--link\"\n        >\n            Remove Item\n        </button>\n    </div>\n)\nexport default Option;","import React from 'react';\nimport Option from './Option';\n\nconst Options = (props) => (\n    <div>\n        <div className=\"widget-header\">\n            <h3 className=\"widget-header__title\">Your Options</h3>\n            <button \n                onClick={props.handleDeleteOptions}\n                className=\"button button--link\"        \n            >\n                    Remove All\n            </button>\n        </div>\n        { props.options.length === 0 && <p className=\"widget__message\"> Please add a option to get started!</p> }\n        {\n            props.options.map((option,index) => (\n                <Option \n                    key={index}\n                    option={option} \n                    count={index+1}\n                    handleDeleteOption={props.handleDeleteOption}\n                />\n            ))\n        }\n    </div>\n)\nexport default Options;","import React from 'react';\n\nconst Header = (props) => (\n    <div className=\"header\">\n        <div className=\"container\">\n            <h1 className=\"header__title\">{props.title}</h1>\n            {props.subtitle && <p className=\"header__sub-title\">{props.subtitle}</p>}\n        </div>\n    </div>\n)\n\nHeader.defaultProps = {\n    title : 'Indecisoinnnasdasdn',\n};\n\nexport default Header;","import React from 'react';\n\nexport default (props) => (\n    <div>\n        <button\n            onClick={props.handlePick}\n            disabled={!props.hasOptions}\n            className=\"big-button\"\n        >\n            What should I do?\n        </button>\n    </div>\n)\n\n","import React from 'react';\nimport Modal from 'react-modal';\n\nconst OptionModal = (props) => (\n    <Modal\n        isOpen={!!props.selectedOption}\n        contentLabel='Selected Option'\n        onRequestClose={props.close}\n        closeTimeoutMS={200}\n        className=\"modal\"\n    >\n        <h3 className=\"modal__title\">Selected Option</h3>       \n        {props.selectedOption && <p className=\"modal__body\">{props.selectedOption}</p>}\n        <button onClick={props.close} className=\"button\">Okie!</button>\n    </Modal>\n)\n\nexport default OptionModal;","import React from 'react';\nimport AddOption from './AddOption';\nimport Options from './Options';\nimport Header from './Header';\nimport Action from './Action';\nimport OptionModal from './OptionModal';\nimport '../styles/styles.scss';\n\nexport default class IndecisionApp extends React.Component {\n\tstate = {\n\t\toptions : [],\n\t\tselectedOption : undefined,\n\t}\n\thandleDeleteOptions = () => {\n\t\tthis.setState(() => ({ options:[] }));\n\t}\n\thandleDeleteOption = (optionToRemove) => {\n\t\tthis.setState((prevState) => ({\n\t\t\toptions : prevState.options.filter((option) => optionToRemove !== option )\n\t\t}))\n\t}\n\thandlePick = () => {\n\t\tconst randomNum = Math.floor(Math.random() * this.state.options.length);\n\t\tconst option = this.state.options[randomNum];\n\t\tthis.setState({ selectedOption : option });\n\t}\n\thandleAddOption = (option) => {\n\t\tif(!option){\n\t\t\treturn('Please enter valid value to add option');\n\t\t} else if (this.state.options.indexOf(option) > -1) {\n\t\t\treturn('This option already exists');\n\t\t}\n\t\tthis.setState((prevState) => ({ options : prevState.options.concat(option) }));\n\t}\n\thandleCloseModal = () => {\n\t\tthis.setState({ selectedOption : undefined})\n\t}\n\tcomponentDidMount() {\n\t\ttry {\n\t\t\tconst json = localStorage.getItem('options');\n\t\t\tconst options = JSON.parse(json);\n\t\t\tif(options) {\n\t\t\t\tthis.setState(() => ({ options }));\n\t\t\t}\n\t\t} catch(e) {\n\n\t\t}\t\t\n\t}\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (prevState.options.length !== this.state.options.length) {\n\t\t\tconst json = JSON.stringify(this.state.options);\n\t\t\tlocalStorage.setItem('options', json);\n\t\t  }\n\t}\n  \trender() {\n\t\tconst title = 'Indecision App';\n\t\tconst subtitle = 'Put your life in hands of a computer.';\n\t\tconst options = [];\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<Header title={title} subtitle={subtitle} />\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<Action \n\t\t\t\t\t\thasOptions={this.state.options.length > 0}\n\t\t\t\t\t\thandlePick={this.handlePick}\t\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"widget\">\n\t\t\t\t\t\t<Options \n\t\t\t\t\t\t\toptions={this.state.options}\n\t\t\t\t\t\t\thandleDeleteOptions={this.handleDeleteOptions}\t\n\t\t\t\t\t\t\thandleDeleteOption={this.handleDeleteOption}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<AddOption \n\t\t\t\t\t\t\thandleAddOption={this.handleAddOption}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<OptionModal \n\t\t\t\t\t\tselectedOption={this.state.selectedOption}\n\t\t\t\t\t\tclose={this.handleCloseModal}\t\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n    \t)\n  \t}\n}\n// IndecisionApp.defaultProps = {\n// \toptions : []\n// }\n","import * as React from 'react';\nimport { join } from 'path';\n\nexport default class CounterApp extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            index : 0,\n        }\n        this.handlePlus = this.handlePlus.bind(this);\n        this.handleMinus = this.handleMinus.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n    componentDidMount() {\n        try {\n            const json = localStorage.getItem('index');\n            const index = parseInt(json, 10);\n            if(!isNaN(index)){\n                this.setState(() => ({ index }));\n            }\n        } catch (error) {\n            \n        }\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if(prevState.index !== this.state.index){\n            localStorage.setItem('index',this.state.index);\n        }\n    }\n    componentWillUnmount() {\n\n    }\n    handlePlus() {\n        this.setState((prev) => ({ index : prev.index + 1}));\n    }\n    handleMinus() {\n        this.setState((prev) => ({ index : prev.index - 1}));\n    }\n    handleReset() {\n        this.setState(() => ({ index:0 }));\n    }\n    render() {\n        return(\n            <div>\n                <h1>Counter App</h1>\n                <p>Counter: {this.state.index}</p>\n                <button onClick={this.handlePlus}>+1</button>\n                <button onClick={this.handleMinus}>-1</button>\n                <button onClick={this.handleReset}>Reset</button>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport IndecisionApp from './components/IndecisionApp';\nimport CounterApp from './CounterApp'\nimport './styles/styles.scss';\n\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<IndecisionApp />, document.getElementById('root'));\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}